if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/service-worker.js')
    .then(registration => {
        console.log('Service Worker registered with scope:', registration.scope);
    })
    .catch(error => {
        console.error('Service Worker registration failed:', error);
    });
}
const webpush = require('web-push');

// VAPID keys should be generated and stored securely
webpush.setVapidDetails('mailto:example@yourdomain.org', publicVapidKey, privateVapidKey);

function sendNotification(subscription, dataToSend) {
    webpush.sendNotification(subscription, dataToSend)
    .then(response => console.log('Sent notification:', response))
    .catch(err => console.error('Error sending notification:', err));
}

// Listen to database changes and trigger push notification
database.on('change', (change) => {
    // Assuming you have stored subscriptions in the database
    subscriptions.forEach(subscription => {
        sendNotification(subscription, JSON.stringify(change));
    });
});
self.addEventListener('push', event => {
    const data = event.data.json();
    console.log('Push received:', data);

    // Handle the database change, e.g., notifying the client
    self.clients.matchAll().then(clients => {
        clients.forEach(client => {
            client.postMessage({
                msg: 'Database updated',
                data: data
            });
        });
    });
});

self.addEventListener('notificationclick', event => {
    event.notification.close();
    event.waitUntil(clients.openWindow('/'));
});
navigator.serviceWorker.addEventListener('message', event => {
    console.log('Message from service worker:', event.data);

    if (event.data.msg === 'Database updated') {
        // Do something in response to the database update
        alert('Database was updated!');
    }
});
// In the service worker
self.addEventListener('sync', event => {
    if (event.tag === 'sync-database') {
        event.waitUntil(checkDatabaseUpdates());
    }
});

async function checkDatabaseUpdates() {
    const response = await fetch('/check-updates');
    const data = await response.json();

    if (data.updated) {
        self.clients.matchAll().then(clients => {
            clients.forEach(client => {
                client.postMessage({
                    msg: 'Database updated',
                    data: data
                });
            });
        });
    }
}
